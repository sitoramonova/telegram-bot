import telebot
from secrets import secrets
import mysql.connector
from datetime import datetime, timedelta
import threading
import time

from telebot import types

token = secrets.get('BOT_API_TOKEN')
bot = telebot.TeleBot(token)

db_config = {
    "host": "localhost",
    "user": "root",
    "password": "turbo76383876",
    "port": "3306"
}

def init_db():
    with mysql.connector.connect(**db_config) as db:
        cursor = db.cursor()
        cursor.execute("CREATE DATABASE IF NOT EXISTS myfirstdatabase")
        db.commit()

    db_config["database"] = "myfirstdatabase"
    with mysql.connector.connect(**db_config) as db:
        cursor = db.cursor()
        cursor.execute("DROP TABLE IF EXISTS tasks")  # Drop table if exists to create a new one
        cursor.execute("""
            CREATE TABLE tasks (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id INT,
                description VARCHAR(255),
                deadline DATETIME,
                completed BOOLEAN DEFAULT FALSE
            )
        """)
        db.commit()

init_db()

user_states = {}

@bot.message_handler(commands=['add'])
def add_task(message):
    user_states[message.chat.id] = 'waiting_for_description'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_description')
def get_task_description(message):
    task_description = message.text
    user_states[message.chat.id] = {'state': 'waiting_for_deadline', 'description': task_description}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'waiting_for_deadline')
def get_task_deadline(message):
    try:
        deadline = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        user_id = message.chat.id
        task_description = user_states[user_id]['description']

        with mysql.connector.connect(**db_config) as db:
            cursor = db.cursor()
            sql = "INSERT INTO tasks (user_id, description, deadline) VALUES (%s, %s, %s)"
            cursor.execute(sql, (user_id, task_description, deadline))
            db.commit()

        bot.send_message(
            message.chat.id,
            f"–ó–∞–¥–∞—á–∞ '{task_description}' —Å –¥–µ–¥–ª–∞–π–Ω–æ–º {deadline.strftime('%d.%m.%Y %H:%M')} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
        )

        reminder_time = deadline - timedelta(days=1)
        threading.Thread(target=reminder, args=(user_id, task_description, reminder_time)).start()

        user_states.pop(user_id)

    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except mysql.connector.Error as db_err:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_err}")

def reminder(user_id, task_description, reminder_time):
    time_to_wait = (reminder_time - datetime.now()).total_seconds()
    if time_to_wait > 0:
        time.sleep(time_to_wait)
    bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–¥–∞—á–∞ '{task_description}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–≤—Ç—Ä–∞!")

@bot.message_handler(commands=['tasks'])
def show_tasks(message):
    user_id = message.chat.id
    with mysql.connector.connect(**db_config) as db:
        cursor = db.cursor()
        cursor.execute("SELECT id, description, deadline FROM tasks WHERE user_id = %s AND completed = FALSE", (user_id,))
        tasks = cursor.fetchall()

    if tasks:
        response = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
        for idx, (task_id, description, deadline) in enumerate(tasks, 1):
            response += f"{idx}. {description} - –¥–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y %H:%M')} (ID: {task_id})\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")

@bot.message_handler(commands=['complete'])
def complete_task(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:")

@bot.message_handler(func=lambda message: message.text.isdigit())
def mark_task_completed(message):
    task_id = int(message.text)
    user_id = message.chat.id

    with mysql.connector.connect(**db_config) as db:
        cursor = db.cursor()
        cursor.execute("UPDATE tasks SET completed = TRUE WHERE id = %s AND user_id = %s", (task_id, user_id))
        db.commit()

    if cursor.rowcount > 0:
        bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    else:
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "üë©‚Äçüíª –ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç?":
        bot.send_message(
            message.chat.id,
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏. \n–¢—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∑–∞–¥–∞—á—É –∏ —É–∫–∞–∑–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ó–∞ —Å—É—Ç–∫–∏ –¥–æ –Ω–µ–≥–æ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏—à—å —Å–≤–æ—é –∑–∞–¥–∞—á—É, —É–∫–∞–∂–∏ —ç—Ç–æ —Ç—É—Ç. –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
        )
    elif message.text == "ü©∞ –ù–∞—á–∞—Ç—å":
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥: \n /add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É \n /tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ \n /complete - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"
        )

if __name__ == '__main__':
    bot.polling(none_stop=True)
